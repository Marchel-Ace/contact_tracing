import pprint
from itertools import groupby
from operator import itemgetter

data = ['480ad11161032c362c37370000000000', '1176ff5a230d2c32312c393100000000', '5fe03703eb8a2c32312c393200000000', '4ec3874bf5d42c32312c393300000000', '480ad11161032c32322c373200000000', '480ad11161032c33372c373500000000', '5fe03703eb8a2c33372c393500000000', '4ec3874bf5d42c33372c393200000000', '4ec3874bf5d42c35322c393100000000', '480ad11161032c35322c373100000000', '1176ff5a230d2c35322c393100000000', '5fe03703eb8a2c35322c393400000000', '4ec3874bf5d42c36372c383800000000', '480ad11161032c36372c373500000000', '1176ff5a230d2c36372c383900000000', '5fe03703eb8a2c36372c393000000000', '4ec3874bf5d42c38322c383800000000', '5fe03703eb8a2c38322c393000000000', '480ad11161032c38322c373600000000', '480ad11161032c39372c373500000000', '5fe03703eb8a2c39372c383800000000', '480ad11161032c3131322c3732000000', '4ec3874bf5d42c3131322c3833000000', '5fe03703eb8a2c3131322c3836000000', '480ad11161032c3132372c3738000000', '4ec3874bf5d42c3132372c3836000000', '5fe03703eb8a2c3132372c3832000000']

def parsing_timestamp(data):
    number = ""
    for x in range(len(data)+1):
        if int(x) % 2 != 0:
            number += data[x]
    return int(number)

list_data = []

for x in data:
    try:
        payload = x.split('2c')
        unique_id = payload[0]
        timestamp = parsing_timestamp(payload[1])
        rssi = "".join([x for x in payload[2][1::2]][:2])
        list_data.append([unique_id, timestamp, rssi])
    except Exception as e:
        continue
def group_by_idx(seqs,idx=0,merge=True):
    d = dict()
    for seq in seqs:
        if isinstance(seq,tuple): seq_kind = tuple
        if isinstance(seq,list): seq_kind = list
        k = seq[idx]
        v = d.get(k,seq_kind()) + (seq[:idx]+seq[idx+1:] if merge else seq_kind((seq[:idx]+seq[idx+1:],)))
        d.update({k:v})
    return d

dic_group = group_by_idx(list_data, 0, False)

def rssi_to_meter(rssi):
    power = -69
    current_rssi = -rssi
    first_step = power - current_rssi 
    second_step = first_step / 20
    second_step = pow(10, second_step)
    return second_step

data = {'fc77b7e08eb7': [[6, '59'], [6, '59'], [6, '59'], [6, '59'], [6, '59'], [6, '59'], [6, '59'], [6, '59'], [6, '59'], [6, '59'], [21, '61'], [21, '61'], [21, '61'], [21, '61'], [21, '61'], [21, '61'], [21, '61'], [21, '61'], [21, '61'], [21, '61'], [36, '61'], [36, '61'], [36, '61'], [36, '61'], [36, '61'], [36, '61'], [36, '61'], [36, '61'], [36, '61'], [36, '61'], [51, '71'], [51, '71'], [51, '71'], [51, '71'], [51, '71'], [51, '71'], [51, '71'], [51, '71'], [51, '71'], [51, '71'], [66, '63'], [66, '63'], [66, '63'], [66, '63'], [66, '63'], [66, '63'], [66, '63'], [66, '63'], [66, '63'], [66, '63'], [81, '56'], [81, '56'], [81, '56'], [81, '56'], [81, '56'], [81, '56'], [81, '56'], [81, '56'], [81, '56'], [81, '56'], [97, '75'], [97, '75'], [97, '75'], [97, '75'], [97, '75'], [97, '75'], [97, '75'], [97, '75'], [97, '75'], [97, '75'], [112, '57'], [112, '57'], [112, '57'], [112, '57'], [112, '57'], [112, '57'], [112, '57'], [112, '57'], [112, '57'], [112, '57']], '7916a45ee544': [[6, '72'], [6, '72'], [6, '72'], [6, '72'], [6, '72'], [6, '72'], [6, '72'], [6, '72'], [6, '72'], [6, '72'], [21, '70'], [21, '70'], [21, '70'], [21, '70'], [21, '70'], [21, '70'], [21, '70'], [21, '70'], [21, '70'], [21, '70'], [37, '70'], [37, '70'], [37, '70'], [37, '70'], [37, '70'], [37, '70'], [37, '70'], [37, '70'], [37, '70'], [37, '70'], [67, '73'], [67, '73'], [67, '73'], [67, '73'], [67, '73'], [67, '73'], [67, '73'], [67, '73'], [67, '73'], [67, '73'], [82, '78'], [82, '78'], [82, '78'], [82, '78'], [82, '78'], [82, '78'], [82, '78'], [82, '78'], [82, '78'], [82, '78'], [97, '78'], [97, '78'], [97, '78'], [97, '78'], [97, '78'], [97, '78'], [97, '78'], [97, '78'], [97, '78'], [97, '78'], [112, '66'], [112, '66'], [112, '66'], [112, '66'], [112, '66'], [112, '66'], [112, '66'], [112, '66'], [112, '66'], [112, '66']], '5fa8b2635161': [[37, '98'], [37, '98'], [37, '98'], [37, '98'], [37, '98'], [37, '98'], [37, '98'], [37, '98'], [37, '98'], [37, '98'], [52, '92'], [52, '92'], [52, '92'], [52, '92'], [52, '92'], [52, '92'], [52, '92'], [52, '92'], [52, '92'], [52, '92'], [66, '99'], [66, '99'], [66, '99'], [66, '99'], [66, '99'], [66, '99'], [66, '99'], [66, '99'], [66, '99'], [66, '99'], [82, '91'], [82, '91'], [82, '91'], [82, '91'], [82, '91'], [82, '91'], [82, '91'], [82, '91'], [82, '91'], [82, '91'], [97, '88'], [97, '88'], [97, '88'], [97, '88'], [97, '88'], [97, '88'], [97, '88'], [97, '88'], [97, '88'], [97, '88'], [112, '92'], [112, '92'], [112, '92'], [112, '92'], [112, '92'], [112, '92'], [112, '92'], [112, '92'], [112, '92'], [112, '92']], '7c0f17da9bb4': [[52, '91'], [52, '91'], [52, '91'], [52, '91'], [52, '91'], [52, '91'], [52, '91'], [52, '91'], [52, '91'], [100, '91']]}
for key in data:
    msg = {
        'unique_id':key,
        'contact_time':0,
        'average_range': rssi_to_meter(int(data[key][0][1]))
    }
    count_meter = 1
    len_value = 0
    for timestamp, rssi in data[key]:
        meter = rssi_to_meter(int(rssi))
        if len_value != len(data[key])-1:
            next_timestamp = data[key][len_value+1][0]
            if next_timestamp - timestamp > 40:
                msg['contact_time'] = 0
                msg['average_range'] = meter
                count_meter += 1
            else:
                msg['contact_time'] = next_timestamp - timestamp + msg['contact_time']
                msg['average_range'] = meter + msg['average_range'] / count_meter
                count_meter += 1
            len_value += 1
        else:
            if msg['contact_time'] != 0:
                pass
            else:
                msg['contact_time'] = 0
                msg['average_range'] = meter
    print(msg)

